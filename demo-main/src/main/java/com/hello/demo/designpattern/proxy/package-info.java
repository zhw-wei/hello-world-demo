/**
 * 代理模式，为一个对象提供了一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象，这样做的好处是可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能<br/>
 * 被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象<br/>
 * 代理模式有有三种不同的形式，主要有三种：静态代理、动态代理(JDK代理/接口代理)和Cglib代理(在内存中动态的创建对象，而不需要实现接口，它属于动态代理的范畴)
 */
package com.hello.demo.designpattern.proxy;